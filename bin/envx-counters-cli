#!/bin/sh

## Default values
HOST="127.0.0.1"
PORT="8907"
SELF="$0"

usage(){
    echo "\
Command line tool for reading counter values from
running instances of the envx_counters Erlang application.

Usage:
\t$SELF -h | --help        show this memo;
\t$SELF [options] list     list available counters;
\t$SELF [options] dump     get current values for all counters.
\t$SELF [options] get COUNTER_NAME [COUNTER_NAME [...]]
\t                         get current value for specified counters;
\t$SELF [options] hit COUNTER_NAME [VALUE]
\t                         increment counter with VALUE (by default - 1);
\t$SELF [options] reset    drop all counters to zero.

Options are:
\t--host HOSTNAME       set hostname or IP address. Default is $HOST;
\t--port PORT_NUMBER    set TCP port number. Default is $PORT;
\t--service|-s NAME     search the Registry for NAME and use host and
\t                      port found automatically. Will work only within
\t                      one Data Center and when only one instance of
\t                      service is present in the Registry."
}

CMD=""
while [ -z "$CMD" -a $# -gt 0 ]; do
    case "$1" in
        -h | --help)
            usage; exit 0 ;;
        --host)
            HOST="$2"
            shift ;;
        --port)
            PORT="$2"
            shift ;;
        --service|-s)
            SERVICE="$2"
            shift ;;
        -*)
            echo "error: unknown option: $1" 1>&2; exit 1 ;;
        *)
            CMD="$1"
            ;;
    esac
    shift
done

if [ -n "$SERVICE" ]; then
    DC="0"
    if [ -f "/etc/envx/dc" ]; then
        DC=`cat /etc/envx/dc`
    fi
    FOUND=`envx-registry list --dc="$DC" --no-title "$SERVICE"`
    if [ -z "$FOUND" ]; then
        echo "error: service '$SERVICE' not found in DC#$DC" 1>&2
        exit 1
    fi
    if [ `echo "$FOUND" | wc -l` -gt 1 ]; then
        echo "error: ambiguous service '$SERVICE':" 1>&2
        echo "$FOUND" 1>&2
        exit 1
    fi
    HOST=`echo "$FOUND" | awk '{print$2}'`
    PORT=`echo "$FOUND" | awk '{print$4}'`
fi

case "$CMD" in
    list)
        echo "list"   | socat STDIO "tcp:$HOST:$PORT" | tr ' ' '\n' | sort ;;
    dump)
        echo "dump"   | socat STDIO "tcp:$HOST:$PORT" | sort ;;
    get)
        while [ $# -gt 0 ]; do
            echo "get $1"
            shift
        done | socat STDIO "tcp:$HOST:$PORT" ;;
    hit)
        CMD="hit $1"
        [ -n "$2" ] && CMD="$CMD $2"
        echo "$CMD"  | socat STDIO "tcp:$HOST:$PORT" | sort ;;
    reset)
        echo "reset"  | socat STDIO "tcp:$HOST:$PORT" | sort ;;
    *)
        echo "error: invalid command: $CMD" 1>&2
        usage; exit 1 ;;
esac
